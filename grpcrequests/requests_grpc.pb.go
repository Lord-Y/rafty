// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: grpcrequests/requests.proto

package grpcrequests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Greeter_SayHello_FullMethodName = "/grpcrequests.Greeter/SayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcrequests.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcrequests/requests.proto",
}

const (
	Rafty_SendPreVoteRequest_FullMethodName       = "/grpcrequests.Rafty/SendPreVoteRequest"
	Rafty_SendVoteRequest_FullMethodName          = "/grpcrequests.Rafty/SendVoteRequest"
	Rafty_SetLeader_FullMethodName                = "/grpcrequests.Rafty/SetLeader"
	Rafty_GetLeader_FullMethodName                = "/grpcrequests.Rafty/GetLeader"
	Rafty_ClientGetLeader_FullMethodName          = "/grpcrequests.Rafty/ClientGetLeader"
	Rafty_SendAppendEntriesRequest_FullMethodName = "/grpcrequests.Rafty/SendAppendEntriesRequest"
	Rafty_SendHeartbeats_FullMethodName           = "/grpcrequests.Rafty/SendHeartbeats"
	Rafty_AskNodeID_FullMethodName                = "/grpcrequests.Rafty/AskNodeID"
)

// RaftyClient is the client API for Rafty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftyClient interface {
	SendPreVoteRequest(ctx context.Context, in *PreVoteRequest, opts ...grpc.CallOption) (*PreVoteResponse, error)
	SendVoteRequest(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	SetLeader(ctx context.Context, in *SetLeaderRequest, opts ...grpc.CallOption) (*SetLeaderResponse, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error)
	ClientGetLeader(ctx context.Context, in *ClientGetLeaderRequest, opts ...grpc.CallOption) (*ClientGetLeaderResponse, error)
	SendAppendEntriesRequest(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error)
	SendHeartbeats(ctx context.Context, in *SendHeartbeatRequest, opts ...grpc.CallOption) (*SendHeartbeatResponse, error)
	AskNodeID(ctx context.Context, in *AskNodeIDRequest, opts ...grpc.CallOption) (*AskNodeIDResponse, error)
}

type raftyClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftyClient(cc grpc.ClientConnInterface) RaftyClient {
	return &raftyClient{cc}
}

func (c *raftyClient) SendPreVoteRequest(ctx context.Context, in *PreVoteRequest, opts ...grpc.CallOption) (*PreVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreVoteResponse)
	err := c.cc.Invoke(ctx, Rafty_SendPreVoteRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendVoteRequest(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, Rafty_SendVoteRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SetLeader(ctx context.Context, in *SetLeaderRequest, opts ...grpc.CallOption) (*SetLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLeaderResponse)
	err := c.cc.Invoke(ctx, Rafty_SetLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderResponse)
	err := c.cc.Invoke(ctx, Rafty_GetLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) ClientGetLeader(ctx context.Context, in *ClientGetLeaderRequest, opts ...grpc.CallOption) (*ClientGetLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientGetLeaderResponse)
	err := c.cc.Invoke(ctx, Rafty_ClientGetLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendAppendEntriesRequest(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntryResponse)
	err := c.cc.Invoke(ctx, Rafty_SendAppendEntriesRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendHeartbeats(ctx context.Context, in *SendHeartbeatRequest, opts ...grpc.CallOption) (*SendHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendHeartbeatResponse)
	err := c.cc.Invoke(ctx, Rafty_SendHeartbeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) AskNodeID(ctx context.Context, in *AskNodeIDRequest, opts ...grpc.CallOption) (*AskNodeIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AskNodeIDResponse)
	err := c.cc.Invoke(ctx, Rafty_AskNodeID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftyServer is the server API for Rafty service.
// All implementations must embed UnimplementedRaftyServer
// for forward compatibility
type RaftyServer interface {
	SendPreVoteRequest(context.Context, *PreVoteRequest) (*PreVoteResponse, error)
	SendVoteRequest(context.Context, *VoteRequest) (*VoteResponse, error)
	SetLeader(context.Context, *SetLeaderRequest) (*SetLeaderResponse, error)
	GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error)
	ClientGetLeader(context.Context, *ClientGetLeaderRequest) (*ClientGetLeaderResponse, error)
	SendAppendEntriesRequest(context.Context, *AppendEntryRequest) (*AppendEntryResponse, error)
	SendHeartbeats(context.Context, *SendHeartbeatRequest) (*SendHeartbeatResponse, error)
	AskNodeID(context.Context, *AskNodeIDRequest) (*AskNodeIDResponse, error)
	mustEmbedUnimplementedRaftyServer()
}

// UnimplementedRaftyServer must be embedded to have forward compatible implementations.
type UnimplementedRaftyServer struct {
}

func (UnimplementedRaftyServer) SendPreVoteRequest(context.Context, *PreVoteRequest) (*PreVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPreVoteRequest not implemented")
}
func (UnimplementedRaftyServer) SendVoteRequest(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVoteRequest not implemented")
}
func (UnimplementedRaftyServer) SetLeader(context.Context, *SetLeaderRequest) (*SetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeader not implemented")
}
func (UnimplementedRaftyServer) GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedRaftyServer) ClientGetLeader(context.Context, *ClientGetLeaderRequest) (*ClientGetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetLeader not implemented")
}
func (UnimplementedRaftyServer) SendAppendEntriesRequest(context.Context, *AppendEntryRequest) (*AppendEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAppendEntriesRequest not implemented")
}
func (UnimplementedRaftyServer) SendHeartbeats(context.Context, *SendHeartbeatRequest) (*SendHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeats not implemented")
}
func (UnimplementedRaftyServer) AskNodeID(context.Context, *AskNodeIDRequest) (*AskNodeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskNodeID not implemented")
}
func (UnimplementedRaftyServer) mustEmbedUnimplementedRaftyServer() {}

// UnsafeRaftyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftyServer will
// result in compilation errors.
type UnsafeRaftyServer interface {
	mustEmbedUnimplementedRaftyServer()
}

func RegisterRaftyServer(s grpc.ServiceRegistrar, srv RaftyServer) {
	s.RegisterService(&Rafty_ServiceDesc, srv)
}

func _Rafty_SendPreVoteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendPreVoteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendPreVoteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendPreVoteRequest(ctx, req.(*PreVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendVoteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendVoteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendVoteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendVoteRequest(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SetLeader(ctx, req.(*SetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_ClientGetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).ClientGetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_ClientGetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).ClientGetLeader(ctx, req.(*ClientGetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendAppendEntriesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendAppendEntriesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendAppendEntriesRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendAppendEntriesRequest(ctx, req.(*AppendEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendHeartbeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendHeartbeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendHeartbeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendHeartbeats(ctx, req.(*SendHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_AskNodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskNodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).AskNodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_AskNodeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).AskNodeID(ctx, req.(*AskNodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rafty_ServiceDesc is the grpc.ServiceDesc for Rafty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rafty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcrequests.Rafty",
	HandlerType: (*RaftyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPreVoteRequest",
			Handler:    _Rafty_SendPreVoteRequest_Handler,
		},
		{
			MethodName: "SendVoteRequest",
			Handler:    _Rafty_SendVoteRequest_Handler,
		},
		{
			MethodName: "SetLeader",
			Handler:    _Rafty_SetLeader_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _Rafty_GetLeader_Handler,
		},
		{
			MethodName: "ClientGetLeader",
			Handler:    _Rafty_ClientGetLeader_Handler,
		},
		{
			MethodName: "SendAppendEntriesRequest",
			Handler:    _Rafty_SendAppendEntriesRequest_Handler,
		},
		{
			MethodName: "SendHeartbeats",
			Handler:    _Rafty_SendHeartbeats_Handler,
		},
		{
			MethodName: "AskNodeID",
			Handler:    _Rafty_AskNodeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcrequests/requests.proto",
}
