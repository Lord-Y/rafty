// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grpcrequests/requests.proto

package grpcrequests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_SayHello_FullMethodName = "/grpcrequests.Greeter/SayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcrequests.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcrequests/requests.proto",
}

const (
	Rafty_RequestVotes_FullMethodName         = "/grpcrequests.Rafty/RequestVotes"
	Rafty_SetLeaderID_FullMethodName          = "/grpcrequests.Rafty/SetLeaderID"
	Rafty_GetLeaderID_FullMethodName          = "/grpcrequests.Rafty/GetLeaderID"
	Rafty_RequestAppendEntries_FullMethodName = "/grpcrequests.Rafty/RequestAppendEntries"
	Rafty_SendHeartbeats_FullMethodName       = "/grpcrequests.Rafty/SendHeartbeats"
)

// RaftyClient is the client API for Rafty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftyClient interface {
	RequestVotes(ctx context.Context, in *RequestVote, opts ...grpc.CallOption) (*RequestVoteReply, error)
	SetLeaderID(ctx context.Context, in *SetLeader, opts ...grpc.CallOption) (*SetLeaderReply, error)
	GetLeaderID(ctx context.Context, in *GetLeader, opts ...grpc.CallOption) (*GetLeaderReply, error)
	RequestAppendEntries(ctx context.Context, in *RequestAppendEntry, opts ...grpc.CallOption) (*RequestAppendEntryReply, error)
	SendHeartbeats(ctx context.Context, in *SendHeartbeatRequest, opts ...grpc.CallOption) (*SendHeartbeatReply, error)
}

type raftyClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftyClient(cc grpc.ClientConnInterface) RaftyClient {
	return &raftyClient{cc}
}

func (c *raftyClient) RequestVotes(ctx context.Context, in *RequestVote, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, Rafty_RequestVotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SetLeaderID(ctx context.Context, in *SetLeader, opts ...grpc.CallOption) (*SetLeaderReply, error) {
	out := new(SetLeaderReply)
	err := c.cc.Invoke(ctx, Rafty_SetLeaderID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) GetLeaderID(ctx context.Context, in *GetLeader, opts ...grpc.CallOption) (*GetLeaderReply, error) {
	out := new(GetLeaderReply)
	err := c.cc.Invoke(ctx, Rafty_GetLeaderID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) RequestAppendEntries(ctx context.Context, in *RequestAppendEntry, opts ...grpc.CallOption) (*RequestAppendEntryReply, error) {
	out := new(RequestAppendEntryReply)
	err := c.cc.Invoke(ctx, Rafty_RequestAppendEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendHeartbeats(ctx context.Context, in *SendHeartbeatRequest, opts ...grpc.CallOption) (*SendHeartbeatReply, error) {
	out := new(SendHeartbeatReply)
	err := c.cc.Invoke(ctx, Rafty_SendHeartbeats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftyServer is the server API for Rafty service.
// All implementations must embed UnimplementedRaftyServer
// for forward compatibility
type RaftyServer interface {
	RequestVotes(context.Context, *RequestVote) (*RequestVoteReply, error)
	SetLeaderID(context.Context, *SetLeader) (*SetLeaderReply, error)
	GetLeaderID(context.Context, *GetLeader) (*GetLeaderReply, error)
	RequestAppendEntries(context.Context, *RequestAppendEntry) (*RequestAppendEntryReply, error)
	SendHeartbeats(context.Context, *SendHeartbeatRequest) (*SendHeartbeatReply, error)
	mustEmbedUnimplementedRaftyServer()
}

// UnimplementedRaftyServer must be embedded to have forward compatible implementations.
type UnimplementedRaftyServer struct {
}

func (UnimplementedRaftyServer) RequestVotes(context.Context, *RequestVote) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVotes not implemented")
}
func (UnimplementedRaftyServer) SetLeaderID(context.Context, *SetLeader) (*SetLeaderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeaderID not implemented")
}
func (UnimplementedRaftyServer) GetLeaderID(context.Context, *GetLeader) (*GetLeaderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderID not implemented")
}
func (UnimplementedRaftyServer) RequestAppendEntries(context.Context, *RequestAppendEntry) (*RequestAppendEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAppendEntries not implemented")
}
func (UnimplementedRaftyServer) SendHeartbeats(context.Context, *SendHeartbeatRequest) (*SendHeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeats not implemented")
}
func (UnimplementedRaftyServer) mustEmbedUnimplementedRaftyServer() {}

// UnsafeRaftyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftyServer will
// result in compilation errors.
type UnsafeRaftyServer interface {
	mustEmbedUnimplementedRaftyServer()
}

func RegisterRaftyServer(s grpc.ServiceRegistrar, srv RaftyServer) {
	s.RegisterService(&Rafty_ServiceDesc, srv)
}

func _Rafty_RequestVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).RequestVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_RequestVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).RequestVotes(ctx, req.(*RequestVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SetLeaderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SetLeaderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SetLeaderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SetLeaderID(ctx, req.(*SetLeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_GetLeaderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).GetLeaderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_GetLeaderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).GetLeaderID(ctx, req.(*GetLeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_RequestAppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAppendEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).RequestAppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_RequestAppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).RequestAppendEntries(ctx, req.(*RequestAppendEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendHeartbeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendHeartbeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendHeartbeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendHeartbeats(ctx, req.(*SendHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rafty_ServiceDesc is the grpc.ServiceDesc for Rafty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rafty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcrequests.Rafty",
	HandlerType: (*RaftyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVotes",
			Handler:    _Rafty_RequestVotes_Handler,
		},
		{
			MethodName: "SetLeaderID",
			Handler:    _Rafty_SetLeaderID_Handler,
		},
		{
			MethodName: "GetLeaderID",
			Handler:    _Rafty_GetLeaderID_Handler,
		},
		{
			MethodName: "RequestAppendEntries",
			Handler:    _Rafty_RequestAppendEntries_Handler,
		},
		{
			MethodName: "SendHeartbeats",
			Handler:    _Rafty_SendHeartbeats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcrequests/requests.proto",
}
