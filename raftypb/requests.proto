syntax = "proto3";

option go_package = "github.com/Lord-Y/rafty/raftypb";

package raftypb;

/*

Naming convention:
https://protobuf.dev/programming-guides/style/

Types:
https://protobuf.dev/programming-guides/proto3/
*/

message PreVoteRequest {
  string id           = 1;
  uint64 current_term = 2;
}

message PreVoteResponse {
  string peer_id      = 1;
  uint64 current_term = 2;
  bool   granted      = 3;
}

message VoteRequest {
  string candidate_id                      = 1;
  string candidate_address                 = 2;
  uint64 current_term                      = 3;
  uint64 last_log_index                    = 4;
  uint64 last_log_term                     = 5;
  bool   candidate_for_leadership_transfer = 6;
}

message VoteResponse {
  bool   granted      = 1;
  uint64 current_term = 2;
  string peer_id      = 3;
}

message LogEntry {
  uint32 file_format = 1;
  uint32 tombstone   = 2;
  uint32 log_type    = 3;
  uint32 timestamp   = 4;
  uint64 term        = 5;
  uint64 index       = 6;
  bytes  command     = 7;
}

message AppendEntryRequest {
  string   leader_id           = 1;
  string   leader_address      = 2;
  uint64   term                = 3;
  uint64   prev_log_index      = 4;
  uint64   prev_log_term       = 5;
  repeated LogEntry entries    = 6;
  uint64   leader_commit_index = 7;
  bool     heartbeat           = 8;
  bool     catchup             = 9;
}

message AppendEntryResponse {
  uint64 term           = 1;
  bool   success        = 2;
  bool   log_not_found  = 3;
  uint64 last_log_index = 4;
  uint64 last_log_term  = 5;
}

message AskNodeIDRequest {
  string id      = 1;
  string address = 2;
}

message AskNodeIDResponse {
  string peer_id            = 1;
  bool   read_replica       = 2;
  string leader_id          = 3;
  string leader_address     = 4;
  bool   ask_for_membership = 5;
}

message ClientGetLeaderRequest {
  string message = 1;
}

message ClientGetLeaderResponse {
  string leader_id      = 1;
  string leader_address = 2;
}

message GetLeaderRequest {
  string peer_id     = 1;
  string peerAddress = 2;
}

message GetLeaderResponse {
  string leader_id          = 1;
  string leader_address     = 2;
  string peer_id            = 3;
  bool   ask_for_membership = 4;
}

message ForwardCommandToLeaderRequest {
  bytes command = 1;
}

message ForwardCommandToLeaderResponse {
  string leader_id      = 1;
  string leader_address = 2;
  bytes  data           = 3;
  string error          = 4;
}

message TimeoutNowRequest {}

message TimeoutNowResponse {
  bool success = 1;
}

message MembershipChangeRequest {
  string id             = 1;
  string address        = 2;
  bool   read_replica   = 3;
  uint32 action         = 4;
  uint64 last_log_index = 5;
  uint64 last_log_term  = 6;
}

message MembershipChangeResponse {
  bool   success        = 1;
  string leader_id      = 2;
  string leader_address = 3;
}

message BootstrapClusterRequest {}

message BootstrapClusterResponse {
  bool success = 1;
}

message InstallSnapshotRequest {
  string  leader_id                 = 1;
  string  leader_address            = 2;
  uint64  last_included_index       = 3;
  uint64  last_included_term        = 4;
  uint64  last_applied_config_index = 5;
  uint64  last_applied_config_term  = 6;
  bytes   configuration             = 7;
  bytes   data                      = 8;
  uint64  size                      = 9;
  uint64  current_term              = 10;
}

message InstallSnapshotResponse {
  uint64 term    = 1;
  bool success = 2;
}

service Rafty {
  rpc SendPreVoteRequest(PreVoteRequest) returns (PreVoteResponse) {}
  rpc SendVoteRequest(VoteRequest) returns (VoteResponse) {}
  rpc ClientGetLeader(ClientGetLeaderRequest) returns (ClientGetLeaderResponse) {}
  rpc GetLeader(GetLeaderRequest) returns (GetLeaderResponse) {}
  rpc SendAppendEntriesRequest(AppendEntryRequest) returns (AppendEntryResponse) {}
  rpc AskNodeID(AskNodeIDRequest) returns (AskNodeIDResponse) {}
  rpc ForwardCommandToLeader(ForwardCommandToLeaderRequest) returns (ForwardCommandToLeaderResponse) {}
  rpc SendTimeoutNowRequest(TimeoutNowRequest) returns (TimeoutNowResponse) {}
  rpc SendMembershipChangeRequest(MembershipChangeRequest) returns (MembershipChangeResponse) {}
  rpc SendBootstrapClusterRequest(BootstrapClusterRequest) returns (BootstrapClusterResponse) {}
  rpc SendInstallSnapshotRequest(InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
}
