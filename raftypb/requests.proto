syntax = "proto3";

option go_package = "github.com/Lord-Y/rafty/raftypb";

package raftypb;

message PreVoteRequest {
  string id = 1;
  string state = 2;
  uint64 currentTerm = 3;
}

message PreVoteResponse {
  string peerID = 1;
  string state = 2;
  uint64 currentTerm = 3;
}

message VoteRequest {
  string candidateId = 1;
  string candidateAddress = 2;
  string state = 3;
  uint64 currentTerm = 4;
  uint64 lastLogIndex = 5;
  uint64 lastLogTerm = 6;
}

message VoteResponse {
  bool voteGranted = 1;
  uint64 currentTerm = 2;
  string peerID = 3;
  bool newLeaderDetected = 4;
  bool requesterStepDown = 5;
}

message LogEntry {
  // should be uint8 but doesn't exist in pb,
  // so we take the closest type
  uint32 fileFormat = 1;

  // should be uint8 but doesn't exist in pb,
  // so we take the closest type
  uint32 tombstone  = 2;
  uint32 timeStamp  = 3;
  uint64 term       = 4;
  bytes  command    = 5;
}

message AppendEntryRequest {
  string leaderID = 1;
  string leaderAddress = 2;
  uint64 term = 3;
  uint64 prevLogIndex = 4;
  uint64 prevLogTerm = 5;
  repeated LogEntry entries = 6;
  uint64 leaderCommitIndex = 7;
  bool heartbeat = 8;
}

message AppendEntryResponse {
  uint64 term = 1;
  bool success = 2;
}

message AskNodeIDRequest {
  string id = 1;
  string address = 2;
}

message AskNodeIDResponse {
  string peerID = 1;
  bool   readOnlyNode = 2;
  string leaderID = 3;
  string leaderAddress = 4;
}

message ClientGetLeaderRequest {
  string message = 1;
}

message ClientGetLeaderResponse {
  string leaderID = 1;
  string leaderAddress = 2;
}

message GetLeaderRequest {
  string peerID = 1;
  string peerAddress = 2;
}

message GetLeaderResponse {
  string leaderID = 1;
  string leaderAddress = 2;
  string peerID = 3;
}

message ForwardCommandToLeaderRequest {
  bytes command = 1;
}

message ForwardCommandToLeaderResponse {
  bytes data = 1;
  string error = 2;
}

message PersistMetadata {
  string id = 1;
  uint64 currentTerm = 2;
  string votedFor = 3;
}

service Rafty {
  rpc SendPreVoteRequest(PreVoteRequest) returns (PreVoteResponse) {}
  rpc SendVoteRequest(VoteRequest) returns (VoteResponse) {}
  rpc ClientGetLeader(ClientGetLeaderRequest) returns (ClientGetLeaderResponse) {}
  rpc GetLeader(GetLeaderRequest) returns (GetLeaderResponse) {}
  rpc SendAppendEntriesRequest(AppendEntryRequest) returns (AppendEntryResponse) {}
  rpc AskNodeID(AskNodeIDRequest) returns (AskNodeIDResponse) {}
  rpc ForwardCommandToLeader(ForwardCommandToLeaderRequest) returns (ForwardCommandToLeaderResponse) {}
}
