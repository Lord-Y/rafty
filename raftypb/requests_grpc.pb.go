// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: raftypb/requests.proto

package raftypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rafty_SendPreVoteRequest_FullMethodName          = "/raftypb.Rafty/SendPreVoteRequest"
	Rafty_SendVoteRequest_FullMethodName             = "/raftypb.Rafty/SendVoteRequest"
	Rafty_ClientGetLeader_FullMethodName             = "/raftypb.Rafty/ClientGetLeader"
	Rafty_GetLeader_FullMethodName                   = "/raftypb.Rafty/GetLeader"
	Rafty_SendAppendEntriesRequest_FullMethodName    = "/raftypb.Rafty/SendAppendEntriesRequest"
	Rafty_AskNodeID_FullMethodName                   = "/raftypb.Rafty/AskNodeID"
	Rafty_ForwardCommandToLeader_FullMethodName      = "/raftypb.Rafty/ForwardCommandToLeader"
	Rafty_SendTimeoutNowRequest_FullMethodName       = "/raftypb.Rafty/SendTimeoutNowRequest"
	Rafty_SendMembershipChangeRequest_FullMethodName = "/raftypb.Rafty/SendMembershipChangeRequest"
	Rafty_SendBootstrapClusterRequest_FullMethodName = "/raftypb.Rafty/SendBootstrapClusterRequest"
	Rafty_SendInstallSnapshotRequest_FullMethodName  = "/raftypb.Rafty/SendInstallSnapshotRequest"
)

// RaftyClient is the client API for Rafty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftyClient interface {
	SendPreVoteRequest(ctx context.Context, in *PreVoteRequest, opts ...grpc.CallOption) (*PreVoteResponse, error)
	SendVoteRequest(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	ClientGetLeader(ctx context.Context, in *ClientGetLeaderRequest, opts ...grpc.CallOption) (*ClientGetLeaderResponse, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error)
	SendAppendEntriesRequest(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error)
	AskNodeID(ctx context.Context, in *AskNodeIDRequest, opts ...grpc.CallOption) (*AskNodeIDResponse, error)
	ForwardCommandToLeader(ctx context.Context, in *ForwardCommandToLeaderRequest, opts ...grpc.CallOption) (*ForwardCommandToLeaderResponse, error)
	SendTimeoutNowRequest(ctx context.Context, in *TimeoutNowRequest, opts ...grpc.CallOption) (*TimeoutNowResponse, error)
	SendMembershipChangeRequest(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*MembershipChangeResponse, error)
	SendBootstrapClusterRequest(ctx context.Context, in *BootstrapClusterRequest, opts ...grpc.CallOption) (*BootstrapClusterResponse, error)
	SendInstallSnapshotRequest(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error)
}

type raftyClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftyClient(cc grpc.ClientConnInterface) RaftyClient {
	return &raftyClient{cc}
}

func (c *raftyClient) SendPreVoteRequest(ctx context.Context, in *PreVoteRequest, opts ...grpc.CallOption) (*PreVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreVoteResponse)
	err := c.cc.Invoke(ctx, Rafty_SendPreVoteRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendVoteRequest(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, Rafty_SendVoteRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) ClientGetLeader(ctx context.Context, in *ClientGetLeaderRequest, opts ...grpc.CallOption) (*ClientGetLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientGetLeaderResponse)
	err := c.cc.Invoke(ctx, Rafty_ClientGetLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderResponse)
	err := c.cc.Invoke(ctx, Rafty_GetLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendAppendEntriesRequest(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntryResponse)
	err := c.cc.Invoke(ctx, Rafty_SendAppendEntriesRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) AskNodeID(ctx context.Context, in *AskNodeIDRequest, opts ...grpc.CallOption) (*AskNodeIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AskNodeIDResponse)
	err := c.cc.Invoke(ctx, Rafty_AskNodeID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) ForwardCommandToLeader(ctx context.Context, in *ForwardCommandToLeaderRequest, opts ...grpc.CallOption) (*ForwardCommandToLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardCommandToLeaderResponse)
	err := c.cc.Invoke(ctx, Rafty_ForwardCommandToLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendTimeoutNowRequest(ctx context.Context, in *TimeoutNowRequest, opts ...grpc.CallOption) (*TimeoutNowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeoutNowResponse)
	err := c.cc.Invoke(ctx, Rafty_SendTimeoutNowRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendMembershipChangeRequest(ctx context.Context, in *MembershipChangeRequest, opts ...grpc.CallOption) (*MembershipChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MembershipChangeResponse)
	err := c.cc.Invoke(ctx, Rafty_SendMembershipChangeRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendBootstrapClusterRequest(ctx context.Context, in *BootstrapClusterRequest, opts ...grpc.CallOption) (*BootstrapClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BootstrapClusterResponse)
	err := c.cc.Invoke(ctx, Rafty_SendBootstrapClusterRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) SendInstallSnapshotRequest(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallSnapshotResponse)
	err := c.cc.Invoke(ctx, Rafty_SendInstallSnapshotRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftyServer is the server API for Rafty service.
// All implementations must embed UnimplementedRaftyServer
// for forward compatibility.
type RaftyServer interface {
	SendPreVoteRequest(context.Context, *PreVoteRequest) (*PreVoteResponse, error)
	SendVoteRequest(context.Context, *VoteRequest) (*VoteResponse, error)
	ClientGetLeader(context.Context, *ClientGetLeaderRequest) (*ClientGetLeaderResponse, error)
	GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error)
	SendAppendEntriesRequest(context.Context, *AppendEntryRequest) (*AppendEntryResponse, error)
	AskNodeID(context.Context, *AskNodeIDRequest) (*AskNodeIDResponse, error)
	ForwardCommandToLeader(context.Context, *ForwardCommandToLeaderRequest) (*ForwardCommandToLeaderResponse, error)
	SendTimeoutNowRequest(context.Context, *TimeoutNowRequest) (*TimeoutNowResponse, error)
	SendMembershipChangeRequest(context.Context, *MembershipChangeRequest) (*MembershipChangeResponse, error)
	SendBootstrapClusterRequest(context.Context, *BootstrapClusterRequest) (*BootstrapClusterResponse, error)
	SendInstallSnapshotRequest(context.Context, *InstallSnapshotRequest) (*InstallSnapshotResponse, error)
	mustEmbedUnimplementedRaftyServer()
}

// UnimplementedRaftyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaftyServer struct{}

func (UnimplementedRaftyServer) SendPreVoteRequest(context.Context, *PreVoteRequest) (*PreVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPreVoteRequest not implemented")
}
func (UnimplementedRaftyServer) SendVoteRequest(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVoteRequest not implemented")
}
func (UnimplementedRaftyServer) ClientGetLeader(context.Context, *ClientGetLeaderRequest) (*ClientGetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetLeader not implemented")
}
func (UnimplementedRaftyServer) GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedRaftyServer) SendAppendEntriesRequest(context.Context, *AppendEntryRequest) (*AppendEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAppendEntriesRequest not implemented")
}
func (UnimplementedRaftyServer) AskNodeID(context.Context, *AskNodeIDRequest) (*AskNodeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskNodeID not implemented")
}
func (UnimplementedRaftyServer) ForwardCommandToLeader(context.Context, *ForwardCommandToLeaderRequest) (*ForwardCommandToLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardCommandToLeader not implemented")
}
func (UnimplementedRaftyServer) SendTimeoutNowRequest(context.Context, *TimeoutNowRequest) (*TimeoutNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTimeoutNowRequest not implemented")
}
func (UnimplementedRaftyServer) SendMembershipChangeRequest(context.Context, *MembershipChangeRequest) (*MembershipChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMembershipChangeRequest not implemented")
}
func (UnimplementedRaftyServer) SendBootstrapClusterRequest(context.Context, *BootstrapClusterRequest) (*BootstrapClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBootstrapClusterRequest not implemented")
}
func (UnimplementedRaftyServer) SendInstallSnapshotRequest(context.Context, *InstallSnapshotRequest) (*InstallSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInstallSnapshotRequest not implemented")
}
func (UnimplementedRaftyServer) mustEmbedUnimplementedRaftyServer() {}
func (UnimplementedRaftyServer) testEmbeddedByValue()               {}

// UnsafeRaftyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftyServer will
// result in compilation errors.
type UnsafeRaftyServer interface {
	mustEmbedUnimplementedRaftyServer()
}

func RegisterRaftyServer(s grpc.ServiceRegistrar, srv RaftyServer) {
	// If the following call pancis, it indicates UnimplementedRaftyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rafty_ServiceDesc, srv)
}

func _Rafty_SendPreVoteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendPreVoteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendPreVoteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendPreVoteRequest(ctx, req.(*PreVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendVoteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendVoteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendVoteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendVoteRequest(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_ClientGetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).ClientGetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_ClientGetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).ClientGetLeader(ctx, req.(*ClientGetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendAppendEntriesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendAppendEntriesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendAppendEntriesRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendAppendEntriesRequest(ctx, req.(*AppendEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_AskNodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskNodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).AskNodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_AskNodeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).AskNodeID(ctx, req.(*AskNodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_ForwardCommandToLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardCommandToLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).ForwardCommandToLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_ForwardCommandToLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).ForwardCommandToLeader(ctx, req.(*ForwardCommandToLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendTimeoutNowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendTimeoutNowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendTimeoutNowRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendTimeoutNowRequest(ctx, req.(*TimeoutNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendMembershipChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendMembershipChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendMembershipChangeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendMembershipChangeRequest(ctx, req.(*MembershipChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendBootstrapClusterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendBootstrapClusterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendBootstrapClusterRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendBootstrapClusterRequest(ctx, req.(*BootstrapClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_SendInstallSnapshotRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).SendInstallSnapshotRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rafty_SendInstallSnapshotRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).SendInstallSnapshotRequest(ctx, req.(*InstallSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rafty_ServiceDesc is the grpc.ServiceDesc for Rafty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rafty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftypb.Rafty",
	HandlerType: (*RaftyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPreVoteRequest",
			Handler:    _Rafty_SendPreVoteRequest_Handler,
		},
		{
			MethodName: "SendVoteRequest",
			Handler:    _Rafty_SendVoteRequest_Handler,
		},
		{
			MethodName: "ClientGetLeader",
			Handler:    _Rafty_ClientGetLeader_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _Rafty_GetLeader_Handler,
		},
		{
			MethodName: "SendAppendEntriesRequest",
			Handler:    _Rafty_SendAppendEntriesRequest_Handler,
		},
		{
			MethodName: "AskNodeID",
			Handler:    _Rafty_AskNodeID_Handler,
		},
		{
			MethodName: "ForwardCommandToLeader",
			Handler:    _Rafty_ForwardCommandToLeader_Handler,
		},
		{
			MethodName: "SendTimeoutNowRequest",
			Handler:    _Rafty_SendTimeoutNowRequest_Handler,
		},
		{
			MethodName: "SendMembershipChangeRequest",
			Handler:    _Rafty_SendMembershipChangeRequest_Handler,
		},
		{
			MethodName: "SendBootstrapClusterRequest",
			Handler:    _Rafty_SendBootstrapClusterRequest_Handler,
		},
		{
			MethodName: "SendInstallSnapshotRequest",
			Handler:    _Rafty_SendInstallSnapshotRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftypb/requests.proto",
}
